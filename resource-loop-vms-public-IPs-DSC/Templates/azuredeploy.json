{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for VM"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for VM"
      }
    },
    "newStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Unique storage account name"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "defaultValue": 20,
      "metadata": {
        "description": "Number of VMs to deploy"
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "West US",
        "East US",
        "West Europe",
        "East Asia",
        "Southeast Asia"
      ],
      "metadata": {
        "description": "Location to deploy the VM in"
      }
    },
    "vmSize": {
      "type": "string",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3"
      ],
      "metadata": {
        "description": "Size of the Virtual Machine."
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2012-R2-Datacenter"
      ],
      "metadata": {
        "description": "OS Version"
      }
    }
  },
  "variables": {
    "virtualNetworkName": "myVNET",
    "availabilitySetName": "myAvSet",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/24",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet1Name'))]",
    "vmStorageAccountContainerName": "vhds",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "vmExtensionName": "WebServerDSC",
    "modulesUrl": "https://github.com/Azure/azure-quickstart-templates/raw/master/dsc-extension-azure-automation-pullserver/UpdateLCMforAAPull.zip ",
    "registrationUrl": "https://eus2-agentservice-prod-1.azure-automation.net/accounts/26a3b072-6033-4c7f-8859-aabb71815987",
    "nodeConfigurationName": "MyWebConfig.DSC",
    "registrationKey": "weG7gZDN4072Zwh7j85XHrvYgHdPpTy5Ifi22TIt9dQPAwmNwndDEpAluIwq6nEhH4/RBO3iP094+KDnzbOTSQ==",
    "configurationFunction": "UpdateLCMforAAPull.ps1\\ConfigureLCMforAAPull",
    "configurationMode": "ApplyAndAutoCorrect",
    "configurationModeFrequencyMins": 15,
    "refreshFrequencyMins": 30,
    "rebootNodeIfNeeded": true,
    "actionAfterReboot": "ContinueConfiguration",
    "allowModuleOverwrite": false
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]"
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('publicIP', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "publicIPLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('nic', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', 'publicIP', copyindex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('publicIP', copyindex()))]"
              },
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('myvm', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'nic', copyindex())]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computername": "[concat('vm', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/vhds/','osdisk', copyIndex(), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('nic', copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat('myvm', copyIndex(),'/dscExtension')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dscLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', 'myvm',copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.7",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "ModulesUrl": "[variables('modulesUrl')]",
          "SasToken": "",
          "ConfigurationFunction": "[variables('configurationFunction')]",
          "Properties": [
           {
              "Name": "RegistrationKey",
              "Value": "[variables('registrationKey')]",
              "TypeName": "System.String"
            },
            {
              "Name": "RegistrationUrl",
              "Value": "[variables('registrationUrl')]",
              "TypeName": "System.String"
            },
            {
              "Name": "NodeConfigurationName",
              "Value": "[variables('nodeConfigurationName')]",
              "TypeName": "System.String"
            },
            {
              "Name": "ConfigurationMode",
              "Value": "[variables('configurationMode')]",
              "TypeName": "System.String"
            },
            {
              "Name": "ConfigurationModeFrequencyMins",
              "Value": "[variables('configurationModeFrequencyMins')]",
              "TypeName": "System.Int32"
            },
            {
              "Name": "RefreshFrequencyMins",
              "Value": "[variables('refreshFrequencyMins')]",
              "TypeName": "System.Int32"
            },
            {
              "Name": "RebootNodeIfNeeded",
              "Value": "[variables('rebootNodeIfNeeded')]",
              "TypeName": "System.Boolean"
            },
            {
              "Name": "ActionAfterReboot",
              "Value": "[variables('actionAfterReboot')]",
              "TypeName": "System.String"
            },
            {
              "Name": "AllowModuleOverwrite",
              "Value": "[variables('allowModuleOverwrite')]",
              "TypeName": "System.Boolean"
            }
          ]
        },
        "protectedSettings": null
      }

    }
  ]
}


